<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.example</groupId>
  <artifactId>woe-sim</artifactId>
  <version>1.0-SNAPSHOT</version>

  <properties>
    <!-- When using docker hub, override docker.name in mvn command line -->
    <!-- mvn clean package docker:push -Ddocker.name=<your-docker-username>/woe-sim -->
    <!-- mvn clean package docker:push -Ddocker.name=mckeeh3/woe-sim -->
    <docker.name>woe-sim</docker.name>
    <git.commit.version>${git.commit.time}.${git.commit.id.abbrev}</git.commit.version>
    <java.version>11</java.version>
    <scala.version>2.13</scala.version>
    <akka.version>2.6.15</akka.version>
    <akka.http.version>10.2.4</akka.http.version>
    <akka.management.version>1.1.1</akka.management.version>
    <akka.persistence.cassandra.version>1.0.5</akka.persistence.cassandra.version>
    <akka.persistence.jdbc.version>5.0.1</akka.persistence.jdbc.version>
    <akka.grpc.version>2.0.0</akka.grpc.version>
    <datastax.core.version>4.12.0</datastax.core.version>
    <grpc.version>1.38.0</grpc.version>
    <postgresql.version>42.2.23.jre7</postgresql.version>
    <yugabyte.driver.version>3.8.0-yb-5</yugabyte.driver.version>
    <logback.version>1.2.4</logback.version>
    <junit.jupiter.version>5.7.2</junit.jupiter.version>
    <junit.platform.version>1.7.2</junit.platform.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-actor-typed_${scala.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-cluster-typed_${scala.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-cluster-sharding-typed_${scala.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-serialization-jackson_2.13</artifactId>
      <version>${akka.version}</version>
    </dependency>

    <!-- Akka Persistence -->
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-persistence-typed_${scala.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>
    <!--dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-persistence-query_${scala.version}</artifactId>
      <version>${akka.version}</version>
    </dependency-->
    <!--dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-persistence-cassandra_${scala.version}</artifactId>
      <version>${akka.persistence.cassandra.version}</version>
    </dependency-->
    <dependency>
      <groupId>com.datastax.oss</groupId>
      <artifactId>java-driver-core</artifactId>
      <version>${datastax.core.version}</version>
    </dependency>
    <!--dependency>
      <groupId>software.aws.mcs</groupId>
      <artifactId>aws-sigv4-auth-cassandra-java-driver-plugin</artifactId>
      <version>4.0.2</version>
    </dependency-->
    <!--dependency>
      <groupId>com.yugabyte</groupId>
      <artifactId>cassandra-driver-core</artifactId>
      <version>${yugabyte.driver.version}</version>
    </dependency-->
    <dependency>
      <groupId>com.lightbend.akka</groupId>
      <artifactId>akka-persistence-jdbc_${scala.version}</artifactId>
      <version>${akka.persistence.jdbc.version}</version>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>${postgresql.version}</version>
    </dependency>

    <!-- Akka Cluster Bootstrap -->
    <dependency>
      <groupId>com.lightbend.akka.management</groupId>
      <artifactId>akka-management-cluster-http_${scala.version}</artifactId>
      <version>${akka.management.version}</version>
    </dependency>
    <dependency>
      <groupId>com.lightbend.akka.management</groupId>
      <artifactId>akka-management-cluster-bootstrap_${scala.version}</artifactId>
      <version>${akka.management.version}</version>
    </dependency>
    <dependency>
      <groupId>com.lightbend.akka.discovery</groupId>
      <artifactId>akka-discovery-kubernetes-api_${scala.version}</artifactId>
      <version>${akka.management.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-discovery_${scala.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>

    <!-- Dynamic Log Levels -->
    <dependency>
      <groupId>com.lightbend.akka.management</groupId>
      <artifactId>akka-management-loglevels-logback_${scala.version}</artifactId>
      <version>${akka.management.version}</version>
    </dependency>
    <dependency>
      <groupId>com.lightbend.akka.management</groupId>
      <artifactId>akka-management_${scala.version}</artifactId>
      <version>${akka.management.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-slf4j_${scala.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>

    <!-- Akka Http -->
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-http_${scala.version}</artifactId>
      <version>${akka.http.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-http-jackson_${scala.version}</artifactId>
      <version>${akka.http.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-stream_${scala.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-stream-testkit_${scala.version}</artifactId>
      <version>${akka.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-http-testkit_${scala.version}</artifactId>
      <version>${akka.http.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-http-spray-json_${scala.version}</artifactId>
      <version>${akka.http.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-http-core_${scala.version}</artifactId>
      <version>${akka.http.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-parsing_${scala.version}</artifactId>
      <version>${akka.http.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-http2-support_2.13</artifactId>
      <version>${akka.http.version}</version>
    </dependency>

    <!-- Akka gRPC -->
    <dependency>
      <groupId>com.lightbend.akka.grpc</groupId>
      <artifactId>akka-grpc-runtime_${scala.version}</artifactId>
      <version>${akka.grpc.version}</version>
    </dependency>
    <!-- for loading of cert, issue #89 -->
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-testing</artifactId>
      <version>${grpc.version}</version>
    </dependency>

    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
    </dependency>

    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-actor-testkit-typed_${scala.version}</artifactId>
      <version>${akka.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-runner</artifactId>
      <version>${junit.platform.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.7.0</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
        </configuration>
      </plugin>

      <!-- mvn versions:display-dependency-updates -->
      <!-- mvn versions:display-property-updates -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>2.8.1</version>
      </plugin>

      <!-- See When using JarJar, OneJar, Assembly or any jar-bundler -->
      <!-- https://doc.akka.io/docs/akka/current/general/configuration.html#when-using-jarjar-onejar-assembly-or-any-jar-bundler -->
      <!-- mvn clean package docker:build -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>1.5</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>allinone</shadedClassifierName>
              <artifactSet>
                <includes>
                  <include>*:*</include>
                </includes>
              </artifactSet>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                  <resource>reference.conf</resource>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <Main-Class>woe.simulator.Main</Main-Class>
                  </manifestEntries>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>pl.project13.maven</groupId>
        <artifactId>git-commit-id-plugin</artifactId>
        <version>2.2.6</version>
        <executions>
          <execution>
            <phase>validate</phase>
            <goals>
              <goal>revision</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <dateFormat>yyyyMMdd-HHmmss</dateFormat>
          <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
          <generateGitPropertiesFile>false</generateGitPropertiesFile>
        </configuration>
      </plugin>

      <plugin>
        <!-- For latest version see - https://dmp.fabric8.io/ -->
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>0.36.0</version>
        <configuration>
          <images>
            <image>
              <!-- Modify as needed for the target repo. For Docker hub use "your-docker-user"/%a -->
              <name>${docker.name}</name>
              <build>
                <from>adoptopenjdk:11-jre-hotspot</from>
                <tags>
                  <tag>latest</tag>
                  <tag>${git.commit.version}</tag>
                </tags>
                <ports>
                  <port>8080</port>
                  <port>8558</port>
                </ports>
                <entryPoint>
                  java $JAVA_OPTS -cp '/maven/*' woe.simulator.Main
                </entryPoint>
                <assembly>
                  <descriptorRef>artifact-with-dependencies</descriptorRef>
                </assembly>
              </build>
            </image>
          </images>
        </configuration>
        <executions>
          <execution>
            <id>build-docker-image</id>
            <phase>package</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.lightbend.akka.grpc</groupId>
        <artifactId>akka-grpc-maven-plugin</artifactId>
        <version>${akka.grpc.version}</version>
        <!-- Hook the generate goal into the lifecycle, automatically tied to generate-sources -->
        <executions>
          <execution>
            <goals>
              <goal>generate</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
