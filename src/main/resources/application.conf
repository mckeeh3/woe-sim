akka {
  loglevel = DEBUG
  log-config-on-start = off

  actor {
    provider = "cluster"

    serialization-bindings {
      "woe.simulator.CborSerializable" = jackson-cbor
    }
  }

# cluster {
#   seed-nodes = [
#     "akka://OTI-Simulator@127.0.0.1:25520"]
# }

  cluster {
    sharding {
      number-of-shards = 1024
    }
  }

  management {
    cluster.bootstrap {
      contact-point-discovery {
#       discovery-method = config
        discovery-method = kubernetes-api

        # For the kubernetes API this value is substituted into the %s in pod-label-selector
        service-name = "woe-sim"

        required-contact-point-nr = 2
        required-contact-point-nr = ${?REQUIRED_CONTACT_POINT_NR}
      }
    }
  }

  persistence {
    max-concurrent-recoveries = 1000

    journal-plugin-fallback {
      recovery-event-timeout = 120s
    }
    journal {
      plugin = "akka.persistence.cassandra.journal"
    }
    cassandra {
      journal {
        keyspace = "woe_simulator"
      }
    }
  }

  http {
    host-connection-pool {
      max-connections = 4  # default 4
      max-open-requests = 1048576  # default 32, Math.pow(2, 20)
    }
  }
}

woe {
  simulator {

    http.server {
      host = "localhost"
      host = ${?woe_simulator_http_server_host}
      port = 8080
      port = ${?woe_simulator_http_server_port}
      # timeout for the complete operation before returning a
      # failure to the http request, will not mean the request
      # was aborted though, and will trigger a lot of work so
      # must be as long as the longest query (but note that a
      # http client will likely time out way before this)
      # this is quite crazy - who would wait 10 minutes for a http request to complete
      # (but note that it only makes it visible how it always was)
      operation-timeout = 10m
    }
    # the max request time to delegate to subregions
    # can currently span the entire set of zoom levels (could be changed to a factor depending on level perhaps)
    # so needs to be high (but kind of shows the madness of this all)
    subregion-request-timeout = 10m
    # how many not-yet-completed requests to subregions are allowed at a time per region/request
    subregion-request-parallelism = 20
  }
  twin {
    region-ping-interval-iso-8601 = "PT1M"
    http.server {
    host = "localhost"
    host = ${?woe_twin_http_server_host}
    port = 8080
    port = ${?woe_twin_http_server_port}
    }
    region-entity-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      throughput = 5
      fork-join-executor {
        parallelism-min = 4
        parallelism-factor = 2.0
        parallelism-max = 64
      }
    }
  }
}

datastax-java-driver {
  # basic.contact-points = [ "127.0.0.1:9042", "127.0.0.2:9042" ]
  basic.contact-points = [ ${?cassandra_host_port_1}, ${?cassandra_host_port_2} ]
  basic.load-balancing-policy {
    local-datacenter = datacenter1
  }
  basic.request.timeout = 10 seconds
  advanced.request-tracker {
    class = RequestLogger
    logs {
      success { enabled = false }
      slow { enabled = true, threshold = 1 second }
      error { enabled = true }
      max-query-length = 500
      show-values = true
      max-value-length = 50
      max-values = 50
      show-stack-traces = true
    }
  }
}
